// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package communications

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommunicatorClient is the client API for Communicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicatorClient interface {
	TransferData(ctx context.Context, in *ReqName, opts ...grpc.CallOption) (*Resp, error)
}

type communicatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicatorClient(cc grpc.ClientConnInterface) CommunicatorClient {
	return &communicatorClient{cc}
}

func (c *communicatorClient) TransferData(ctx context.Context, in *ReqName, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/communications.Communicator/TransferData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunicatorServer is the server API for Communicator service.
// All implementations must embed UnimplementedCommunicatorServer
// for forward compatibility
type CommunicatorServer interface {
	TransferData(context.Context, *ReqName) (*Resp, error)
	mustEmbedUnimplementedCommunicatorServer()
}

// UnimplementedCommunicatorServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicatorServer struct {
}

func (*UnimplementedCommunicatorServer) TransferData(context.Context, *ReqName) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferData not implemented")
}
func (*UnimplementedCommunicatorServer) mustEmbedUnimplementedCommunicatorServer() {}

func RegisterCommunicatorServer(s *grpc.Server, srv CommunicatorServer) {
	s.RegisterService(&_Communicator_serviceDesc, srv)
}

func _Communicator_TransferData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicatorServer).TransferData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communications.Communicator/TransferData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicatorServer).TransferData(ctx, req.(*ReqName))
	}
	return interceptor(ctx, in, info, handler)
}

var _Communicator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "communications.Communicator",
	HandlerType: (*CommunicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferData",
			Handler:    _Communicator_TransferData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "communicator.proto",
}
